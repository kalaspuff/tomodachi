[tool.poetry]
name = "tomodachi"
version = "0.26.5dev0"
description = "Microservice library on asyncio - HTTP server, websockets, pub/sub messaging for AWS SNS+SQS and RabbitMQ"
authors = ["Carl Oscar Aaro <hello@carloscar.com>"]
keywords = ["tomodachi", "microservice", "microservices", "framework", "library", "asyncio", "aws", "sns", "sqs", "amqp", "rabbitmq", "http", "websockets", "easy", "fast", "pubsub", "events", "event based messaging", "messages", "protocol buffers", "protobuf", "async", "message attributes", "filter policy", "distributed architecture", "scalable", "python 3"]
readme = "README.rst"
license = "MIT"

homepage = "https://github.com/kalaspuff/tomodachi"
repository = "https://github.com/kalaspuff/tomodachi"
documentation = "https://tomodachi.dev/docs"

classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: aiohttp",
    "Framework :: AsyncIO",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Typing :: Typed"
]

packages = [
    { include = "tomodachi/" },
]

[tool.poetry.urls]
Changelog = "https://github.com/kalaspuff/tomodachi/blob/master/CHANGES.rst"

[tool.poetry.dependencies]
python = "^3.8"

aioamqp = ">=0.13.0,<0.16.0"
aiobotocore = ">=1.3.0,<2.12.0"
tzlocal = ">=1.4,<6.0"
pytz = "*"
cchardet = { version = ">=2.1.7", python = "<3.10" }
aiohttp = ">=3.7.0,<3.10.0"
colorama = ">=0.3.9,<0.5.0"
asahi = ">=0.1,<0.3"
structlog = ">=21.5.0,<25.0.0"

# derived from aiobotocore for dependency resolution speed in same cases.
botocore = ">=1.20.106"

# extras
protobuf = { version = ">=3.20.0", optional = true }
uvloop = { version = ">=0.14.0,<1.0.0", optional = true }
aiodns = { version = ">=1.2.0", optional = true }
Brotli = { version = "^1.0.9", optional = true }

# opentelemetry
opentelemetry-instrumentation = { version = ">=0.40b0,<1.0.0", allow-prereleases = true, optional = true }
opentelemetry-api = { version = ">=1.19.0,<2.0.0", optional = true }
opentelemetry-sdk = { version = ">=1.19.0,<2.0.0", optional = true }
opentelemetry-exporter-otlp = { version = ">=1.19.0,<2.0.0", optional = true }
opentelemetry-util-http = { version = ">=0.40b0,<1.0.0", allow-prereleases = true, optional = true }
opentelemetry-exporter-prometheus = { version = ">=0.40b0,<1.0.0", allow-prereleases = true, optional = true }

# extras management
asahi-extras = { version = "*", optional = true }

[tool.poetry.extras]
protobuf = ["protobuf"]
uvloop = ["uvloop"]
aiodns = ["aiodns"]
brotli = ["Brotli"]

opentelemetry = ["opentelemetry-instrumentation", "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-exporter-otlp", "opentelemetry-util-http"]
opentelemetry-exporter-prometheus = ["opentelemetry-exporter-prometheus", "opentelemetry-instrumentation", "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-exporter-otlp", "opentelemetry-util-http"]
instruments = ["tomodachi"]

aws = ["asahi-extras"]        # ["aiobotocore", "botocore", "aiohttp"]
amqp = ["asahi-extras"]       # ["aioamqp"]
http = ["asahi-extras"]       # ["aiohttp"]
scheduler = ["asahi-extras"]  # ["tzlocal", "pytz"]
color = ["asahi-extras"]      # ["colorama"]

[tool.poetry.dev-dependencies]
# The dev dependencies look messy, but helps out to not get a bunch of win32 into the dev category.
flake8 = { version = ">=3.8.4", markers = "sys_platform != \"win32\"" }
flake8-black = { version = ">=0.2.0", markers = "sys_platform != \"win32\"" }
flake8-isort = { version = ">=4.0.0", markers = "sys_platform != \"win32\"" }
flake8-pyproject = { version = ">=1.1.0", markers = "sys_platform != \"win32\"" }
isort = { version = ">=5.6.0", markers = "sys_platform != \"win32\"", extras = ["plugins"] }
pytest = { version = ">=6.1.0", markers = "sys_platform != \"win32\"" }
pytest-cov = { version = ">=2.10.0", markers = "sys_platform != \"win32\"" }
pytest-rerunfailures = { version = ">=10.2", markers = "sys_platform != \"win32\"" }
pytest-xdist = { version = ">=2.5.0", markers = "sys_platform != \"win32\"" }
black = { version = "*", markers = "sys_platform != \"win32\"", allow-prereleases = true }
mypy = { version = ">=0.800", markers = "sys_platform != \"win32\"" }
codecov = { version = ">=2.1.13", markers = "sys_platform != \"win32\"" }

types-protobuf = { version = ">=0.1.13", markers = "sys_platform != \"win32\"" }
types-pytz = { version = ">=2021.1.0", markers = "sys_platform != \"win32\"" }
types-tzlocal = { version = ">=0.1.1", markers = "sys_platform != \"win32\"" }
types-setuptools = { version = ">=16.0", markers = "sys_platform != \"win32\"" }

[tool.poetry.scripts]
tomodachi = "tomodachi.cli:cli_entrypoint"

[tool.poetry.plugins."opentelemetry_instrumentor"]
tomodachi = "tomodachi.opentelemetry:TomodachiInstrumentor"

[tool.poetry.plugins."opentelemetry_meter_provider"]
tomodachi_prometheus = "tomodachi.opentelemetry.prometheus:TomodachiPrometheusMeterProvider"

[tool.poetry.plugins."opentelemetry_metric_reader"]
tomodachi_prometheus = "tomodachi.opentelemetry.prometheus:TomodachiPrometheusMetricReader"

[tool.poetry.plugins."opentelemetry_distro"]
tomodachi = "tomodachi.opentelemetry.distro:OpenTelemetryDistro"

[tool.poetry.plugins."opentelemetry_configurator"]
tomodachi = "tomodachi.opentelemetry.distro:OpenTelemetryConfigurator"

[tool.poetry.plugins."opentelemetry_environment_variables"]
tomodachi = "tomodachi.opentelemetry.environment_variables"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target_version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '\.eggs/|tomodachi\.egg-info/|\.git/|\.mypy_cache/|\.venv/|\.pytest_cache/|\.vscode/|__pycache__/|build/|dist/|proto_build/|syntax_error_service\.py|setup\.py'

[tool.isort]
profile = "black"
line_length = 120
src_paths = ["tomodachi", "tests", "examples"]
known_first_party = ["tomodachi", "run_test_service_helper", "proto_build"]
known_third_party = ["opentelemetry"]
skip = [".mypy_cache", ".pytest_cache", "__pycache__", "tomodachi.egg-info", ".eggs", "syntax_error_service.py", ".git", ".venv", ".vscode", "build", "dist", "tmp"]

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    "F", # pyflakes
    "E", # pycodestyle (erorr)
    "I", # isort
    "W", # pycodestyle (warning)
    "C901", # complex-structure
    "UP", # pyupgrade
    "N", # pep8-naming
    "B", # flake8-bugbear
    "DTZ", # flake8-datetimez
    "Q", # flake8-quotes
    "T20", # flake8-print
    "PL", # pylint
    "PIE", # flake8-pie
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "PGH", # pygrep-hooks
    "RUF", # ruff-specific
    "PT", # flake8-pytest-style
    "C4", # flake8-comprehensions
    "A", # flake8-builtins
    "BLE", # flake8-blind-except
    "S", # flake8-bandit
]
extend-select = ["I"]
ignore = [
    "UP007", # union type annotations
    "UP006", # type instead of Type
    "SIM105", # try-catch-pass
    "S110", # try-catch-pass (logging)
    "BLE001", # blind exception
    "SLF001", # private attribute access
    "I001", # isort
    "PLR0913", # too many arguments
    "UP037", # type annotation with quotes
]
src = [
  "tomodachi",
  "tests",
]

[tool.ruff.lint.isort]
known-first-party = ["tomodachi", "run_test_service_helper", "proto_build"]
known-third-party = ["opentelemetry", "prometheus_client"]


[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
  "S101", # assert
  "PLR2004", # magic-value-comparison
]
"tomodachi/**/*_pb2.py*" = [
    "UP009", # utf-8 encoding
    "SLF001", # private member accessed
    "E501", # line too long
    "I001", # isort
    "UP036", # version block outdated
    "N802", # camelcase function
    "N816", # mixedcase variable
]

[tool.mypy]
pretty = true
files = ["$MYPY_CONFIG_FILE_DIR/tomodachi", "$MYPY_CONFIG_FILE_DIR/tests/type_hinting_validation.py"]
ignore_missing_imports = true
show_error_codes = true
no_implicit_reexport = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
local_partial_types = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

[tool.flake8]
ignore = ["E203", "E501", "W503", "E231", "E202", "E704"]
exclude = ["tomodachi.egg-info", ".git", ".mypy_cache", ".pytest_cache", ".venv", ".vscode", "__pycache__", "build", "dist", "proto_build", "tmp"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:Assigning a dict or dict-like mapping to 'service.options' is deprecated. Use the 'tomodachi.Options' class instead.:DeprecationWarning:tomodachi",
    "ignore:Using the '@tomodachi.service' decorator is deprecated. Service classes should instead inherit from the 'tomodachi.Service' class.:DeprecationWarning:tomodachi",
    "ignore:Using the 'service.log_setup\\(\\)' function is deprecated and has no effect. Use the structlog logger from 'tomodachi.logging.get_logger\\(\\)' instead.:DeprecationWarning:tomodachi",
    "ignore:Using the 'service.log\\(\\)' function is deprecated. Use the structlog logger from 'tomodachi.logging.get_logger\\(\\)' instead.:DeprecationWarning:tomodachi",
    "ignore:Using the 'RequestHandler.get_request_ip\\(\\)' function is deprecated. Use the 'tomodachi.get_forwarded_remote_ip\\(\\)' function instead.:DeprecationWarning:tomodachi",
    "ignore:Using the -c \\(--config\\) CLI argument is deprecated. Set and parse service config with environment variables instead.:DeprecationWarning:tomodachi",
    "ignore:Using the 'discovery' interface is deprecated. Please implement lifecycle hooks for your service instead.:DeprecationWarning:tomodachi",
    "ignore:'cgi' is deprecated and slated for removal in Python 3\\.13:DeprecationWarning:aiohttp",
    "ignore:pkg_resources is deprecated as an API. See .*:DeprecationWarning:opentelemetry.instrumentation",
    "ignore:Deprecated call to `pkg_resources.declare_namespace.*:DeprecationWarning:pkg_resources",
]

[tool.coverage.run]
omit = ["examples/*", "tests/*", "tomodachi/__main__.py", "tomodachi/__version__.py"]
